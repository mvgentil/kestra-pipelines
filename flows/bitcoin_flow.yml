# This is a Kestra flow to extract Bitcoin price and store it in a PostgreSQL database.
# It uses the yfinance library to fetch the Bitcoin price and SQLAlchemy to interact with the database.
# The flow consists of three main tasks:
# 1. Extract: Fetches the Bitcoin price and timestamp.
# 2. Transform: Converts the extracted data into a dictionary.
# 3. Load: Inserts the transformed data into the database.

id: bitcoin_price
namespace: company.team

tasks:

  - id: setup_database
    type: io.kestra.plugin.scripts.python.Script
    beforeCommands:
      - pip install sqlalchemy
      - pip install psycopg2-binary
    script: |
      
      from sqlalchemy import create_engine, text

      DB_HOST = "{{ kv('DB_HOST') }}"
      DB_PORT = "{{ kv('DB_PORT') }}"
      DB_NAME = "{{ kv('DB_NAME') }}"
      DB_USER = "{{ kv('DB_USER') }}"
      DB_PASSWORD = "{{ kv('DB_PASSWORD') }}"

      engine = create_engine(f"postgresql+psycopg2://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}")

      with engine.begin() as conn:
          conn.execute(text("""
                  CREATE TABLE IF NOT EXISTS bitcoin_price (
                      id SERIAL PRIMARY KEY,
                      price DECIMAL(20, 6) NOT NULL,
                      timestamp TIMESTAMP NOT NULL
                      )
                  """))
      print("Database setup completed.")

  - id: extract
    type: io.kestra.plugin.scripts.python.Script
    beforeCommands:
      - pip install kestra
      - pip install yfinance
      - pip install pytz
    script: |
      import requests
      from datetime import datetime
      import pytz
      import yfinance as yf
      from kestra import Kestra

      br_tz = pytz.timezone("America/Sao_Paulo")

      def bitcoin_price():
          btc = yf.Ticker("BTC-USD")
          price = btc.history(period="1d")["Close"].iloc[-1]
          timestamp = datetime.now(br_tz)
          return price, timestamp

      price, timestamp = bitcoin_price()
      timestamp_str = timestamp.strftime("%Y-%m-%d %H:%M:%S")

      Kestra.outputs({'price': price, 'timestamp': timestamp_str})

  - id: load
    type: io.kestra.plugin.scripts.python.Script
    beforeCommands:
      - pip install sqlalchemy
      - pip install psycopg2-binary
    script: |
      from sqlalchemy import create_engine, text
      import datetime

      # Variáveis de conexão
      DB_HOST = "{{ kv('DB_HOST') }}"
      DB_PORT = "{{ kv('DB_PORT') }}"
      DB_NAME = "{{ kv('DB_NAME') }}"
      DB_USER = "{{ kv('DB_USER') }}"
      DB_PASSWORD = "{{ kv('DB_PASSWORD') }}"

      # Criação da engine com SQLAlchemy
      engine = create_engine(f"postgresql+psycopg2://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}")

      # Dados recebidos do output anterior
      price = round({{ outputs.extract.vars.price }}, 6)
      timestamp = "{{ outputs.extract.vars.timestamp }}"  # já vem como string

      # Inserção no banco
      try:
          with engine.begin() as connection:
              print(f"Inserindo dados: price={price}, timestamp={timestamp}")
              connection.execute(
                  text("INSERT INTO bitcoin_price (price, timestamp) VALUES (:price, :timestamp)"),
                  {"price": price, "timestamp": timestamp}
              )
              print("Dados salvos com sucesso no banco de dados.")
      except Exception as e:
          print(f"Erro ao salvar no banco de dados: {e}")

triggers:
  - id: schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "*/5 * * * *"
    timezone: America/Sao_Paulo
